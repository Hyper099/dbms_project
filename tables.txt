CREATE TABLE STUDENT(
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(255) not NULL,
    last_name VARCHAR(255) not NULL,
    email VARCHAR(500) NOT NULL
    password VARCHAR(500) NOT NULL
)
CREATE TABLE INSTRUCTOR(
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(255) not NULL,
    last_name VARCHAR(255) not NULL,
    email VARCHAR(500) NOT NULL
    password VARCHAR(500) NOT NULL
)


--!---------------------------------------------------------------------------------------------------------------------

-- ! UPDATED COURSES TABLE.
CREATE TABLE COURSES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    instructor_id INT NOT NULL,
    Foreign Key (instructor_id) REFERENCES instructor(id) on delete cascade
);

--! NEW CATEGORIES TABLE.
CREATE TABLE CATEGORIES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
);

--! NEW COURSE_DETAILS TABLE.
CREATE TABLE COURSE_DETAILS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    course_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    category_id INT,
    duration VARCHAR(50) NOT NULL,
    access_period INT DEFAULT 30,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Foreign Key (course_id) REFERENCES courses(id) on delete cascade,
    Foreign Key (category_id) REFERENCES categories (id) on delete set null
);

-- DROP TABLE courses;

--!---------------------------------------------------------------------------------------------------------------------

CREATE TABLE CART(
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT NOT NULL,
    course_id INT NOT NULL,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES STUDENT (id),
    FOREIGN KEY (course_id) REFERENCES COURSES (id),
    UNIQUE (student_id, course_id) -- Prevent duplicate course entries
);

--!---------------------------------------------------------------------------------------------------------------------

CREATE TABLE payment (
    id VARCHAR(255) PRIMARY KEY,
    student_id INT,
    amount DECIMAL(10, 2),
    status VARCHAR(50),
    transaction_id VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Foreign Key (student_id) REFERENCES STUDENT (id) ON DELETE CASCADE ON UPDATE CASCADE
);

--!---------------------------------------------------------------------------------------------------------------------

CREATE TABLE TRANSACTION_COURSES (
    id INT AUTO_INCREMENT PRIMARY KEY,
    transaction_id VARCHAR(255),
    student_id INT,
    course_id INT,
    FOREIGN KEY (transaction_id) REFERENCES PAYMENT (id),
    FOREIGN KEY (student_id) REFERENCES STUDENT (id),
    FOREIGN KEY (course_id) REFERENCES COURSES (id)
);

--!---------------------------------------------------------------------------------------------------------------------

--! NOTES : Since STATUS is derived now we are not going to include that into our database.

CREATE TABLE Enrollment (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT,
    course_id INT,
    enrollment_date DATE NOT NULL,
    completed_lessons INT DEFAULT 0,
    FOREIGN KEY (student_id) REFERENCES Student (id),
    FOREIGN KEY (course_id) REFERENCES Courses (id)
);
DROP Table enrollment;

CREATE TABLE Certificates (
    certificate_id INT PRIMARY KEY AUTO_INCREMENT,
    enrollment_id INT UNIQUE,
    FOREIGN KEY (enrollment_id) REFERENCES Enrollment (id)
);

--!---------------------------------------------------------------------------------------------------------------------

CREATE TABLE ASSIGNMENTS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    due_date DATE NOT NULL,
    max_marks INT NOT NULL,
    FOREIGN KEY (course_id) REFERENCES COURSES (id) ON DELETE CASCADE
);

--!---------------------------------------------------------------------------------------------------------------------

CREATE TABLE ASSESSMENTS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    assignment_id INT NOT NULL,
    score DECIMAL(5, 2) NOT NULL,
    total_questions INT NOT NULL,
    correct_answers INT NOT NULL,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES STUDENT (id),
    FOREIGN KEY (assignment_id) REFERENCES ASSIGNMENTS (id)
);

--!---------------------------------------------------------------------------------------------------------------------

CREATE TABLE QUESTIONS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    assignment_id INT NOT NULL,
    question TEXT NOT NULL,
    options JSON NOT NULL,
    correct_answer VARCHAR(255) NOT NULL,
    FOREIGN KEY (assignment_id) REFERENCES ASSIGNMENTS (id) ON DELETE CASCADE
);

--!---------------------------------------------------------------------------------------------------------------------

CREATE TABLE STUDENT_ANSWERS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    assessment_id INT NOT NULL,
    question_id INT NOT NULL,
    student_answer VARCHAR(255) NOT NULL,
    is_correct BOOLEAN NOT NULL,
    FOREIGN KEY (assessment_id) REFERENCES ASSESSMENTS (id),
    FOREIGN KEY (question_id) REFERENCES QUESTIONS (id)
);
